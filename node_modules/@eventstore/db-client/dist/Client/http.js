"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _HTTP_client, _HTTP_channelCredentials, _HTTP_defaultUserCredentials, _HTTP_insecure;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HTTP = void 0;
const http_1 = require("http");
const https_1 = require("https");
const url_1 = require("url");
const utils_1 = require("../utils");
class HTTP {
    constructor(client, channelCredentials, defaultUserCredentials) {
        _HTTP_client.set(this, void 0);
        _HTTP_channelCredentials.set(this, void 0);
        _HTTP_defaultUserCredentials.set(this, void 0);
        _HTTP_insecure.set(this, void 0);
        this.request = async (method, path, { searchParams, ...options }, body) => {
            const url = await this.createURL(path, searchParams);
            return this.makeRequest(method, url, options, body);
        };
        this.makeRequest = async (method, url, options, body) => new Promise((resolve, reject) => {
            var _a, _b;
            const headers = {
                "content-type": "application/json",
                ...((_a = options.headers) !== null && _a !== void 0 ? _a : {}),
            };
            const credentials = (_b = options.credentials) !== null && _b !== void 0 ? _b : __classPrivateFieldGet(this, _HTTP_defaultUserCredentials, "f");
            if (!__classPrivateFieldGet(this, _HTTP_insecure, "f") && credentials) {
                headers["Authorization"] = `Basic ${Buffer.from(`${credentials.username}:${credentials.password}`).toString("base64")}`;
            }
            const ca = __classPrivateFieldGet(this, _HTTP_channelCredentials, "f").rootCertificate
                ? [__classPrivateFieldGet(this, _HTTP_channelCredentials, "f").rootCertificate]
                : undefined;
            const callback = (res) => {
                var _a, _b;
                if (res.statusCode === 307) {
                    return resolve(this.makeRequest(method, new url_1.URL(res.headers.location, url), options, body));
                }
                if (res.statusCode < 200 || res.statusCode >= 300) {
                    const error = (_b = (_a = options.transformError) === null || _a === void 0 ? void 0 : _a.call(options, res.statusCode, res.statusMessage, res)) !== null && _b !== void 0 ? _b : defaultTransformError(res.statusCode, res.statusMessage, res);
                    return reject(error);
                }
                let response = "";
                res.on("data", (d) => {
                    response += d;
                });
                res.on("end", () => {
                    return resolve(JSON.parse(response));
                });
            };
            utils_1.debug.connection(`Making %s call to %s with headers %h`, method, url.toString(), headers);
            const req = __classPrivateFieldGet(this, _HTTP_insecure, "f")
                ? (0, http_1.request)(url, {
                    method,
                    headers,
                }, callback)
                : (0, https_1.request)(url, {
                    method,
                    headers,
                    ca,
                }, callback);
            req.on("error", (error) => {
                reject(error);
            });
            if (body) {
                req.write(body);
            }
            req.end();
        });
        this.createURL = async (pathname, searchParams = {}) => {
            const channel = await this.getChannel.call(__classPrivateFieldGet(this, _HTTP_client, "f"));
            const protocol = __classPrivateFieldGet(this, _HTTP_insecure, "f") ? "http://" : "https://";
            const target = channel.getTarget().replace(/^[a-z]*:/, protocol);
            const url = new url_1.URL(target);
            url.pathname = pathname;
            for (const [key, value] of Object.entries(searchParams)) {
                if (value != null) {
                    url.searchParams.set(key, value);
                }
            }
            return url;
        };
        __classPrivateFieldSet(this, _HTTP_client, client, "f");
        __classPrivateFieldSet(this, _HTTP_channelCredentials, channelCredentials, "f");
        __classPrivateFieldSet(this, _HTTP_defaultUserCredentials, defaultUserCredentials, "f");
        __classPrivateFieldSet(this, _HTTP_insecure, !!channelCredentials.insecure, "f");
    }
    getChannel() {
        return this.getChannel();
    }
}
exports.HTTP = HTTP;
_HTTP_client = new WeakMap(), _HTTP_channelCredentials = new WeakMap(), _HTTP_defaultUserCredentials = new WeakMap(), _HTTP_insecure = new WeakMap();
const defaultTransformError = (statusCode, statusMessage) => {
    switch (statusCode) {
        case 401: {
            return new utils_1.AccessDeniedError();
        }
    }
    return new utils_1.UnknownError(undefined, statusMessage);
};
