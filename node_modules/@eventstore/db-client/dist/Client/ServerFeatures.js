"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ServerFeatures_supported;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerFeatures = void 0;
const shared_pb_1 = require("../../generated/shared_pb");
const serverfeatures_grpc_pb_1 = require("../../generated/serverfeatures_grpc_pb");
const utils_1 = require("../utils");
const constants_1 = require("@grpc/grpc-js/build/src/constants");
const UNKNOWN = "unknown";
class ServerFeatures {
    constructor(error, supportedMethods) {
        this.serverVersion = UNKNOWN;
        _ServerFeatures_supported.set(this, new Map());
        this.supports = (
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        method, feature) => {
            var _a;
            const path = method.path.toLowerCase();
            const isSupported = feature
                ? !!((_a = __classPrivateFieldGet(this, _ServerFeatures_supported, "f").get(path)) === null || _a === void 0 ? void 0 : _a.has(feature))
                : __classPrivateFieldGet(this, _ServerFeatures_supported, "f").has(path);
            if (isSupported) {
                utils_1.debug.connection("%s %s is Supported", path, feature !== null && feature !== void 0 ? feature : "");
            }
            else {
                utils_1.debug.connection("%s %s is not Supported", path, feature !== null && feature !== void 0 ? feature : "");
            }
            return isSupported;
        };
        if (error) {
            utils_1.debug.connection("Failed to fetch server features with error: %s", error.message);
            utils_1.debug.connection("Assuming unknown server version.");
            return;
        }
        this.serverVersion = supportedMethods.getEventStoreServerVersion();
        utils_1.debug.connection("Connected to server version %s", this.serverVersion);
        for (const method of supportedMethods.getMethodsList()) {
            const path = `/${method.getServiceName()}/${method.getMethodName()}`.toLowerCase();
            const features = method.getFeaturesList();
            __classPrivateFieldGet(this, _ServerFeatures_supported, "f").set(path, new Set(features));
        }
    }
}
exports.ServerFeatures = ServerFeatures;
_ServerFeatures_supported = new WeakMap();
ServerFeatures.createServerFeatures = [
    serverfeatures_grpc_pb_1.ServerFeaturesClient,
    "getSupportedMethods",
    (client) => new Promise((resolve, reject) => {
        utils_1.debug.connection("Fetching server features");
        client.getSupportedMethods(new shared_pb_1.Empty(), (error, supportedMethods) => {
            if (error && error.code !== constants_1.Status.UNIMPLEMENTED) {
                return reject(error);
            }
            return resolve(new ServerFeatures(error, supportedMethods));
        });
    }),
];
