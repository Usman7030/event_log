"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ReadStream_convertGrpcEvent, _ReadStream_grpcStream;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReadStream = void 0;
const stream_1 = require("stream");
const constants_1 = require("@grpc/grpc-js/build/src/constants");
const utils_1 = require("../../utils");
class ReadStream extends stream_1.Transform {
    constructor(createGRPCStream, convertGrpcEvent, options) {
        super({ ...options, objectMode: true });
        _ReadStream_convertGrpcEvent.set(this, void 0);
        _ReadStream_grpcStream.set(this, void 0);
        this.initialize = async () => {
            try {
                (await __classPrivateFieldGet(this, _ReadStream_grpcStream, "f"))
                    .on("error", (err) => {
                    if (err.code === constants_1.Status.CANCELLED)
                        return;
                    const error = (0, utils_1.convertToCommandError)(err);
                    this.emit("error", error);
                })
                    .pipe(this);
            }
            catch (error) {
                this.emit("error", error);
            }
        };
        __classPrivateFieldSet(this, _ReadStream_convertGrpcEvent, convertGrpcEvent, "f");
        __classPrivateFieldSet(this, _ReadStream_grpcStream, createGRPCStream(), "f");
        this.initialize();
    }
    _transform(resp, _encoding, next) {
        var _a, _b, _c;
        if ((_a = resp.hasConfirmation) === null || _a === void 0 ? void 0 : _a.call(resp)) {
            this.emit("confirmation");
        }
        if ((_b = resp.hasStreamNotFound) === null || _b === void 0 ? void 0 : _b.call(resp)) {
            const streamNotFound = resp.getStreamNotFound();
            __classPrivateFieldGet(this, _ReadStream_grpcStream, "f").then((stream) => {
                var _a;
                stream.destroy(new utils_1.StreamNotFoundError(null, (_a = streamNotFound.getStreamIdentifier()) === null || _a === void 0 ? void 0 : _a.getStreamName()));
                next();
            });
            return;
        }
        if ((_c = resp.hasEvent) === null || _c === void 0 ? void 0 : _c.call(resp)) {
            const resolved = __classPrivateFieldGet(this, _ReadStream_convertGrpcEvent, "f").call(this, resp.getEvent());
            return next(null, resolved);
        }
        next();
    }
    async cancel() {
        const stream = await __classPrivateFieldGet(this, _ReadStream_grpcStream, "f");
        return new Promise((resolve) => {
            // https://github.com/grpc/grpc-node/issues/1464
            // https://github.com/grpc/grpc-node/issues/1652
            setImmediate(() => {
                stream.cancel();
                resolve();
            });
        });
    }
}
exports.ReadStream = ReadStream;
_ReadStream_convertGrpcEvent = new WeakMap(), _ReadStream_grpcStream = new WeakMap();
